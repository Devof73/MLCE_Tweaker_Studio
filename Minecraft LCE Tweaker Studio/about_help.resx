<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label33.Text" xml:space="preserve">
    <value>-CMIX contains a color mixer, a light to dark drawer, and 
exactly color picker.
-To make re draw one or more textures, fill the right listbox,
clicking on "Add Files", and multiselecting on the dialog.
 You can preview a image, clicking them in the list.
 To draw light textures to dark, scroll the "dark level" trackbar 
 and click on set, or change their transparency.
 You can apply that change to all files.</value>
  </data>
  <data name="label32.Text" xml:space="preserve">
    <value>-To start making a texture image, fill Items Textures Folder Textbox
with the 1.13.2 java items folder path, right this now you need a 
file output destination, select it clicking on "...".

-Click "Build Items.png".</value>
  </data>
  <data name="label31.Text" xml:space="preserve">
    <value>-Edit strings, loading a language to editor, clicking on left-sighted
 list item, will start filling the right list with the labels, click on a 
message, after, select edit string, and edit it.
-Find string clicking on "Tools"&gt;"Find Multiple String" and type 
there your value, click "Find", bottom list will have all lines what 
contains your value. </value>
  </data>
  <data name="label24.Text" xml:space="preserve">
    <value>To start modding some part of the game, you need to get a copy of your 
MediaPS3.arc, this file is located in the path: 

/yourGameTitleId/USRDIR/Common/Media/

Transfer that to your pc on a easy folder and click on:

</value>
  </data>
  <data name="label22.Text" xml:space="preserve">
    <value>The launcher is the initial point of the program itself, there is, where you can,
create a new instance open a file clicking on the "Open File" button, after 
selecting the file to edit, some buttons will be enabled, this mean; you can 
edit that file with that program, depending of the format of the file.


</value>
  </data>
  <data name="label21.Text" xml:space="preserve">
    <value>Modding workspace is a mini-fileExplorer to manipulate 
your mod, fastly and edit simply, to add a folder click on 
"Select Game Folder", tree view will start reading dirs
and sub-dirs of your selected path.
Double click in a file to open it, if the selected file 
is supported, will spawn a custom window to edit or
 view it.

If do you want to use that selected folder a long time, 
you can save is a FAVORITE to reload it after restarting
the program.
</value>
  </data>
  <data name="label19.Text" xml:space="preserve">
    <value>this other is a common file such as downloadable or
 extra content of the game itself, capable of containing
 world parameters, internally compress files, GRF rules
, among others. It is used for texture packs and skin packs.</value>
  </data>
  <data name="label18.Text" xml:space="preserve">
    <value>This format is a descendant of a multimedia format
 known as BINK, but, in audio, it is complex decom...
..pression, it is a single audio container, similar to WAV
, it compresses a wave file to a small result size, 
used as game audio.</value>
  </data>
  <data name="label16.Text" xml:space="preserve">
    <value>another simple matrix format, "col" quickly understood 
as COLOR, is a container of colors of the entire ingame
environment of the game itself, lighting, color of fog in
 different dimensions, particles, etc.</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>I can translate "ARC" to; All Game Resources Container,
thats true, the file type in the game contains so much 
FUI resources of the intestines of the game, the functions
, menus, graphics, and languages.</value>
  </data>
</root>